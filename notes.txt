Client Id: name of starting service (Ex: database-service, email-service, etc.)
Action Key: short reference to action (Ex: REGISTER, RUN, SEND, etc)
Events: Data broadcasted with certain event is sent to all event listeners containing the same event


Actions:
REGISTER - register new service to database - occurs on client service startup [x] 
    {ClientID: string, Action: "REGISTER", ClientAddress: string}
SEND - send data to a different service [x]
    {ClientID: string, Action: "SEND", VictimID: string, Data: tbd}
    Victim recieves:
    {
        "action": "SEND",
        "data": data object,
        "source": ClientID
    }
REMOVE - remove service from database - occurs on client service shutdown (final thing sent) [x]
    {ClientID: string, Action: "REMOVE"}
KILL - shutdown other service (data (can be blank) -> sent to victim along with KILL order) [x]
    {ClientID: string, Action: "KILL", VictimID: string, Data: string}
GETIP - get ip and port of other service [x]
    {ClientID: string, Action: "GETIP", VictimID: string}
REGLIST - register event listener - occurs on client service startup []
    {ListenerID: string, Action: "REGLIST", Event: string, ListenerEndpoint: string}
REMOVELIST - remove event listener - occurs on client service shutdown []
    {ListenerID: string, Action: "REMOVELIST"}
BROADCAST - broadcast event and data to listeners []
    ClientID:BROADCAST:Event:Data
    {ClientID: string, Action: "BROADCAST", Event: string, Data: tbd}

RUN - run something (tbd)
AUTH - authenticate service/data (tbd)


Databases:
Server:
    Tables:
        - services (id (increment),service_id,client_address)
        - listeners (id (increment),service_id,listener_id,event,listener_address)
        - logging? (id (increment),time,serviceid,event,data)

